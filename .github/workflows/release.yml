name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    # Only run if CI workflow completed successfully and on main branch push (not PR)
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v1

      - name: Install cocogitto
        run: cargo install cocogitto

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if there are releasable changes
        id: check_changes
        run: |
          if cog check --from-latest-tag; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Create release
        if: steps.check_changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Generate changelog and bump version
          cog bump --auto
          
          # Get the new version
          NEW_VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          
          # Create GitHub release
          gh release create "v${NEW_VERSION}" \
            --title "Release v${NEW_VERSION}" \
            --notes-file CHANGELOG.md \
            --draft=false \
            --prerelease=false

  publish:
    needs: release
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v1

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish library first
          cd just-mcp-lib
          cargo publish --token ${CARGO_REGISTRY_TOKEN}
          
          # Wait a bit for the library to be available
          sleep 30
          
          # Publish binary crate
          cd ..
          cargo publish --token ${CARGO_REGISTRY_TOKEN}